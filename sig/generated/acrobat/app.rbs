# Generated from lib/acrobat/app.rb with RBS::Inline

module Acrobat
  class FileNotFound < StandardError
    def initialize: (untyped path) -> untyped
  end
end

module FileSystemObject
  def self.instance: () -> untyped

  def self.windows_path: (untyped path) -> untyped
end

module ACRO
end

module Acrobat
  class App
    # [WIN32_OLE] ole_obj
    attr_reader ole_obj: untyped

    def initialize: () -> untyped

    def self.close: (untyped path) -> untyped

    # Runs the adobe app and quits at the end
    # @example
    #   Acrobat::App.run do |app|
    #     doc = app.open('doc.pdf')
    #     doc.fill_form( city: 'City', state: 'ST')
    #     doc.save_as('filled.pdf')
    #   end
    #
    # @rbs return Void
    def self.run: () -> Void

    def self.replace_pages: (untyped pdf_file, untyped replacement, output_name: untyped, **untyped opts) -> untyped

    # Fills the form with updates in a hash
    # @example
    #    Acrobat::App.fill_form(myform.pdf, output_name: 'filled.pdf
    #                                 , update_hash: { name: 'dom', filled_date: 1/20/2013
    # @rbs pdf_form: String -- the String path of a fillable pdf file
    # @rbs output_name: String -- the name of the saved filled pdf file
    # @rbs update_hash: Hash -- the hash with updates
    def self.fill_form: (String pdf_form, output_name: String, update_hash: Hash) -> untyped

    # @rbs return Array[AvDoc]
    # @rbs &: (AvDoc) -> Void
    def avdocs: () { (AvDoc) -> Void } -> Array[AvDoc]

    # show the Adobe Acrobat application
    def show: () -> untyped

    # hide the Adobe Acrobat application
    def hide: () -> untyped

    # Finds the pdfs in a dir
    # @rbs dir: String -- the directory to find pdfs in
    # @rbs return Array[Pathname] -- of pdf files
    def find_pdfs_in_dir: (String dir) -> Array[Pathname]

    def merge_pdfs: (*untyped pdfs) -> untyped

    # merges the pdfs in directory
    # @rbs dir: String -- the path of the directory
    # @rbs name: String | Nil -- the name of the returned pdf file
    #    if the name is nil, the name is "merged.pdf"
    # @rbs output_dir: String | Nil -- the name of the output dir
    #    if the output_dir is nil, the output dir is the dir param
    # return [Boolean] if the merge was successful or not
    def merge_pdfs_in_dir: (String dir, ?name: String | Nil, ?output_dir: String | Nil) -> untyped

    # quit the Adobe App.
    #   closes the open adobe documents and quits the program
    # @rbs return nil
    def quit: () -> nil

    attr_reader docs: untyped

    # open the file.
    # @rbs file: String | Pathname -- #to_path
    # @rbs &: (PDoc) -> Nil
    # @rbs return PDoc -- the open file as a Pdoc instance
    def open: (String | Pathname file) { (PDoc) -> Nil } -> PDoc

    def form: () -> untyped

    private

    def load_constants: (untyped ole_obj) -> untyped
  end
end
